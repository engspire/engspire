generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                   Int                @id @default(autoincrement())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now())
  externalId           String             @unique
  username             String?            @unique
  emailAddress         String?            @unique
  firstName            String?
  lastName             String?
  role                 UserRole           @default(GUEST)
  lastOnlineAt         DateTime           @default(now())
  phoneNumber          String?
  Course               Course[]
  Batch                Batch[]
  Courses_Teachers     Courses_Teachers[]
  Batch_Learners       Batch_Learners[]   @relation("LearnerInCourseBatch")
  Batch_Learner_Author Batch_Learners[]   @relation("CreatorOfLearnerInCourseBatchRecord")
  Batch_Teachers       Batch_Teachers[]
  paymentsPaid         Payment[]          @relation("PaymentsPaid")
  paymentsReceived     Payment[]          @relation("PaymentsReceived")
  Payment              Payment[]
  learnerProfile       LearnerProfile?    @relation("LearnerProfile")
  teacherProfile       TeacherProfile?    @relation("TeacherProfile")
  creatorProfile       CreatorProfile?    @relation("CreatorProfile")
}

model LearnerProfile {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  user          User      @relation("LearnerProfile", fields: [userId], references: [id], onDelete: Cascade)
  userId        Int       @unique
  positiveScore Int       @default(0)
  negativeScore Int       @default(0)
}

model TeacherProfile {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  user          User      @relation("TeacherProfile", fields: [userId], references: [id], onDelete: Cascade)
  userId        Int       @unique
  positiveScore Int       @default(0)
  negativeScore Int       @default(0)
}

model CreatorProfile {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  user          User      @relation("CreatorProfile", fields: [userId], references: [id], onDelete: Cascade)
  userId        Int       @unique
  positiveScore Int       @default(0)
  negativeScore Int       @default(0)
}

model Course {
  id                Int                @id @default(autoincrement())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?          @updatedAt
  title             String
  description       String?
  metadata          Json?
  whatsAppUrl       String?
  meetingUrl        String?
  classroomUrl      String?
  classDayMonday    Boolean            @default(false)
  classDayTuesday   Boolean            @default(false)
  classDayWednesday Boolean            @default(false)
  classDayThursday  Boolean            @default(false)
  classDayFriday    Boolean            @default(false)
  classDaySaturday  Boolean            @default(false)
  classDaySunday    Boolean            @default(false)
  classStartTime    String?
  classEndTime      String?
  durationValue     Int?
  durationUnit      DurationUnit?
  courseFeeTotal    Float              @default(0)
  courseFeePartial  Float              @default(0)
  courseFeeCurrency Currency           @default(LKR)
  teachers          Courses_Teachers[]
  owner             User               @relation(fields: [ownerId], references: [id])
  ownerId           Int
  positiveScore     Int                @default(0)
  negativeScore     Int                @default(0)
  Batch             Batch[]
}

model Courses_Teachers {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime?      @updatedAt
  course    Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacher   User           @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  status    Teacher_Status @default(PENDING)
  courseId  Int
  teacherId Int
}

model Batch {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime?        @updatedAt
  course            Course           @relation(fields: [courseId], references: [id])
  courseId          Int
  batchCode         String           @unique
  title             String
  description       String?
  metadata          Json?
  whatsAppUrl       String?
  meetingUrl        String?
  classroomUrl      String?
  classDayMonday    Boolean          @default(false)
  classDayTuesday   Boolean          @default(false)
  classDayWednesday Boolean          @default(false)
  classDayThursday  Boolean          @default(false)
  classDayFriday    Boolean          @default(false)
  classDaySaturday  Boolean          @default(false)
  classDaySunday    Boolean          @default(false)
  classStartTime    String?
  classEndTime      String?
  courseStartDate   DateTime?
  courseEndDate     DateTime?
  courseFeeTotal    Float            @default(0)
  courseFeePartial  Float            @default(0)
  courseFeeCurrency Currency         @default(LKR)
  learners          Batch_Learners[]
  teachers          Batch_Teachers[]
  owner             User             @relation(fields: [ownerId], references: [id])
  ownerId           Int
  positiveScore     Int              @default(0)
  negativeScore     Int              @default(0)
}

model Batch_Learners {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  enrollMonth   String?
  updatedAt     DateTime?      @updatedAt
  batch         Batch          @relation(fields: [batchCode], references: [batchCode], onDelete: Cascade)
  batchCode     String
  learner       User           @relation("LearnerInCourseBatch", fields: [learnerId], references: [id], onDelete: Cascade)
  learnerId     Int
  creator        User?          @relation("CreatorOfLearnerInCourseBatchRecord", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId      Int?
  status        Learner_Status @default(PENDING)
  paymentStatus PaymentStatus  @default(PENDING)
}

model Batch_Teachers {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime?      @updatedAt
  course    Batch          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacher   User           @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  status    Teacher_Status @default(PENDING)
  courseId  Int
  teacherId Int
}

model Payment {
  id                Int            @id @default(autoincrement())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime?      @updatedAt
  externalId        String?
  paidAt            DateTime
  paidFor           String
  remarks           String?
  orderId           String?
  method            PaymentMethod?
  currency          Currency       @default(LKR)
  amount            Float
  status            PaymentStatus
  isVerified        Boolean        @default(false)
  metadata          Json?
  documentUrl       String?
  payerEmailAddress String
  payeeEmailAddress String?
  payer             User?          @relation("PaymentsPaid", fields: [payerId], references: [id], onDelete: Restrict)
  payerId           Int?
  payee             User?          @relation("PaymentsReceived", fields: [payeeId], references: [id], onDelete: Restrict)
  payeeId           Int?
  User              User?          @relation(fields: [userId], references: [id])
  userId            Int?
}

// Enums ----------------------------------------------------------------------

enum UserRole {
  GUEST
  USER
  MANAGER
  ADMIN
  SUPERADMIN
}

enum Learner_Status {
  PENDING
  ACTIVE
  COMPLETED
  SUSPENDED
  REJECTED
}

enum Teacher_Status {
  PENDING
  ACTIVE
  COMPLETED
  SUSPENDED
  REJECTED
}

enum Currency {
  LKR
  USD
  GBP
  EUR
  AUD
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

enum PaymentMethod {
  CASH
  PAYHERE
  VISA
  MASTER
  AMEX
  EZCASH
  MCASH
  GENIE
  VISHWA
  PAYAPP
  HNB
  FRIMI
}

enum DurationUnit {
  MINUTES
  HOURS
  DAYS
  WEEKS
  MONTHS
  YEARS
}
